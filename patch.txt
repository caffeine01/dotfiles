diff --git a/src/config/ConfigManager.cpp b/src/config/ConfigManager.cpp
index b80fd427..36e73422 100644
--- a/src/config/ConfigManager.cpp
+++ b/src/config/ConfigManager.cpp
@@ -587,6 +587,7 @@ CConfigManager::CConfigManager() {
     m_pConfig->addConfigValue("cursor:hide_on_key_press", Hyprlang::INT{0});
     m_pConfig->addConfigValue("cursor:hide_on_touch", Hyprlang::INT{1});
     m_pConfig->addConfigValue("cursor:use_cpu_buffer", Hyprlang::INT{0});
+    m_pConfig->addConfigValue("cursor:warp_back_after_non_mouse_input", Hyprlang::INT{0});
 
     m_pConfig->addConfigValue("autogenerated", Hyprlang::INT{0});
 
diff --git a/src/devices/IPointer.hpp b/src/devices/IPointer.hpp
index 503a690e..b33713dd 100644
--- a/src/devices/IPointer.hpp
+++ b/src/devices/IPointer.hpp
@@ -19,6 +19,7 @@ class IPointer : public IHID {
     struct SMotionEvent {
         uint32_t timeMs = 0;
         Vector2D delta, unaccel;
+        bool mouse = false;
     };
 
     struct SMotionAbsoluteEvent {
diff --git a/src/devices/Mouse.cpp b/src/devices/Mouse.cpp
index ae89ed92..0c707128 100644
--- a/src/devices/Mouse.cpp
+++ b/src/devices/Mouse.cpp
@@ -26,6 +26,7 @@ CMouse::CMouse(SP<Aquamarine::IPointer> mouse_) : mouse(mouse_) {
             .timeMs  = E.timeMs,
             .delta   = E.delta,
             .unaccel = E.unaccel,
+            .mouse   = true,
         });
     });
 
diff --git a/src/managers/input/InputManager.cpp b/src/managers/input/InputManager.cpp
index fdaa6bfa..55099f85 100644
--- a/src/managers/input/InputManager.cpp
+++ b/src/managers/input/InputManager.cpp
@@ -83,7 +83,8 @@ CInputManager::~CInputManager() {
 }
 
 void CInputManager::onMouseMoved(IPointer::SMotionEvent e) {
-    static auto PNOACCEL = CConfigValue<Hyprlang::INT>("input:force_no_accel");
+    static auto PNOACCEL         = CConfigValue<Hyprlang::INT>("input:force_no_accel");
+    static auto PWARPFORNONMOUSE = CConfigValue<Hyprlang::INT>("cursor:warp_back_after_non_mouse_input");
 
     const auto  DELTA = *PNOACCEL == 1 ? e.unaccel : e.delta;
 
@@ -94,13 +95,19 @@ void CInputManager::onMouseMoved(IPointer::SMotionEvent e) {
 
     PROTO::relativePointer->sendRelativeMotion((uint64_t)e.timeMs * 1000, DELTA, e.unaccel);
 
-    g_pPointerManager->move(DELTA);
+    if (e.mouse && !m_bLastInputMouse && *PWARPFORNONMOUSE)
+        g_pPointerManager->warpTo(m_vLastMousePos);
+    else
+        g_pPointerManager->move(DELTA);
 
-    mouseMoveUnified(e.timeMs);
+    mouseMoveUnified(e.timeMs, false, e.mouse);
 
     m_tmrLastCursorMovement.reset();
 
     m_bLastInputTouch = false;
+
+    if (e.mouse)
+        m_vLastMousePos = getMouseCoordsInternal();
 }
 
 void CInputManager::onMouseWarp(IPointer::SMotionAbsoluteEvent e) {
@@ -138,7 +145,7 @@ void CInputManager::sendMotionEventsToFocused() {
     g_pSeatManager->setPointerFocus(g_pCompositor->m_pLastFocus.lock(), LOCAL);
 }
 
-void CInputManager::mouseMoveUnified(uint32_t time, bool refocus) {
+void CInputManager::mouseMoveUnified(uint32_t time, bool refocus, bool mouse) {
     if (!g_pCompositor->m_bReadyToProcess || g_pCompositor->m_bIsShuttingDown || g_pCompositor->m_bUnsafeState)
         return;
 
@@ -148,6 +155,8 @@ void CInputManager::mouseMoveUnified(uint32_t time, bool refocus) {
     if (MOUSECOORDSFLOORED == m_vLastCursorPosFloored && !refocus)
         return;
 
+    m_bLastInputMouse = mouse;
+
     static auto PFOLLOWMOUSE      = CConfigValue<Hyprlang::INT>("input:follow_mouse");
     static auto PMOUSEREFOCUS     = CConfigValue<Hyprlang::INT>("input:mouse_refocus");
     static auto PFOLLOWONDND      = CConfigValue<Hyprlang::INT>("misc:always_follow_on_dnd");
diff --git a/src/managers/input/InputManager.hpp b/src/managers/input/InputManager.hpp
index e56aaf6f..7a7edd1b 100644
--- a/src/managers/input/InputManager.hpp
+++ b/src/managers/input/InputManager.hpp
@@ -239,7 +239,7 @@ class CInputManager {
 
     uint32_t           m_uiCapabilities = 0;
 
-    void               mouseMoveUnified(uint32_t, bool refocus = false);
+    void               mouseMoveUnified(uint32_t, bool refocus = false, bool mouse = false);
 
     SP<CTabletTool>    ensureTabletToolPresent(SP<Aquamarine::ITabletTool>);
 
@@ -250,6 +250,10 @@ class CInputManager {
     PHLLSREF               m_pFoundLSToFocus;
     PHLWINDOWREF           m_pFoundWindowToFocus;
 
+    // used for warping back after non-mouse input
+    Vector2D m_vLastMousePos   = {};
+    bool     m_bLastInputMouse = true;
+
     // for holding focus on buttons held
     bool m_bFocusHeldByButtons   = false;
     bool m_bRefocusHeldByButtons = false;
